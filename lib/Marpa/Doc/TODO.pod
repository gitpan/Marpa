=head1 NAME

Marpa::Doc::To_Do - Marpa's To Do List

=head1 PRINCIPLES

MDLex and MDL will know about Marpa, but B<not> vice versa.

=head1 ORDERED TASKS

=over 4

=item * Or_map's should be hashes instead of arrays.

=item * Add tokens() call, to allow multiple earlemes
in cookie/incremental form, to be added at once.

Add complete() call, to allow completions up to an
earleme specified in the arg.  Default is up to the
furthest earleme, which is identical to the present
end_input.  In array context, this should return
the predicted terminals.

=item * Allow action options to be changed when evaluator
is created, but not afterwards.

=item * Create a "stress test" for zero-width and-nodes
and or-nodes:
A grammar with two rules in a cycle.  Each rule is all
nulling (nullable?) symbols
except for the last symbol, which must be non-nulling.

=item * I may assume in several places and zero-length and-nodes have
no cause or predecessor.  I have to find any places where this
assumption is being made, and change it.  In addition to the
above test, I may want to reread the relevant evaluator code.

=item * Create HTML Parser.

=back

=head1 HIGH PRIORITY

=over 4

=item * After MDL is factored out, and stripping & cloning is
fully functional, create a matrix of tests of 
valid grammars vs. their result.  Matrix is

    grammars X inputs X clone grammar X clone recognizer X strip grammar X strip recognizer

Do just one or two inputs per grammar.

=item * Implement an recognizer option to simply skip
ahead spans where no terminal can possibly be found.
This means coming up with some way of passing
Marpa's idea of where the
next terminal should be expected to the lexer.
Also the lexer should be able to inform Marpa
which earleme a token is at.

Use PREDICTIVE flag to the Recognizer to enable this?

=item * I should start to assume that anyone explicitly using
separate recognizer and evaluator stages knows what they are doing.
Revise the documentation accordingly.  Just because they are
using the plumbing interface does not mean they want to know about
the recognizer/evaluator distinction.

=item * Add optimizations when max_parses <= 1
    For example, no need to prune duplicate parses

=item * Add MAX_COUNT for rules.  Implement on one of left- and right-
    recursion only.  No immediate need for both.

=back

=head1 MEDIUM PRIORITY

=over 4

=item * Add a SYNOPSIS to the Plumbing document.

=item * When rereading Internals doc, check if
parse bocage creation can probably be made a bit slightly cleaner.

=item * Make sure that nulling symbols can never be terminals

=back

=head1 LOW PRIORITY

=over 4

=item * Add a trace_choices option?  There was an option to trace
non-trivial evaluation choices in the old evaluator, and the new trace_iterations
doesn't entirely replace it.

=item * Add a show_derivation option.

=back

=head1 MAYBE, MAYBE NOT

=over 4

=item * Allow call to 
C<show_tree> before first call to C<value>?  Should
it cause an error message?  How about after unsuccessful
call to C<value>?

=back

=head1 MDLex

=over 4

=item * MDLex currently does not sort terminals by priority.  This
means terminal priorities are totally unused.  Change this?

=back

=head1 MDL

MDL is EOL'd.

=over 4

=item * In the MDL grammar, concatenate_lines is called uselessly in a number
of places.  Eliminate this, for efficiency's sake?

=item * bin/mdl in parsing equation.marpa
(which is used
for many examples in the author.t/Makefile) takes a final return
and parses past it, but does not fail.

The return is NOT
in the grammar.
What happens is that the call to ::text() is
not recognized as a failure, and then the evaluator
looks at the last successful parse.

What to do here?  It should be failing, probably.
And does the current behavior of the evaluator,
(taking the default end as FURTHEST_EARLEME) set
the user up for spurious successes.

=back

=head1 SUPPORT

See the L<support section|Parse::Marpa/SUPPORT> in the main module.

=head1 AUTHOR

Jeffrey Kegler

=head1 LICENSE AND COPYRIGHT

Copyright 2007 - 2009 Jeffrey Kegler

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl 5.10.0.

=cut

